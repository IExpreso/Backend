#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('express-sequelize');
const http = require('http');
const models = require('../models');
const redis = require('socket.io-redis');
const jwt = require('jsonwebtoken');

const env = process.env.NODE_ENV || 'development';
const secret  = require(__dirname + '/../config/config.json')[env]['secret'];

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
  /**
   * Create HTTP server.
   */
const server = http.createServer(app);

// Setup socket connections
const io = require('socket.io')(server, {
  adapter: redis({ host: 'localhost', port: 6379 }),
  pingInterval: 10000,
  pingTimeout: 5000,
  cookie: false
});

app.io = io;
models.Route.findAll().then(result => {
  result.forEach(route => {
    let listenerNps = io.of(`/api/track/${route.name}`);
    listenerNps.use(require('socketio-jwt').authorize({
        secret: secret,
        handshake: true
    }));

    listenerNps.on('connection', socket => {
      let msg = `client ${socket.id} connected.`;
      console.log(msg);
      socket.on('disconnect', () => console.log(`client ${socket.id} disconnected`));
    });

    console.log('created student socket listener');

    let driverNps = io.of(`/api/drive/${route.name}`);
    driverNps.use((socket, next) => {
      let token = socket.request._query.token;
      console.log(socket.request);
      console.log(token);
      if (token) jwt.verify(token, secret, (err, decoded) => {
        if (err) socket.emit('error', {
          status: 401,
          success: false,
          message: 'Failed to authenticate'
        });
        else if (decoded.role != 'driver') socket.emit('error', {
          status: 403,
          success: false,
          message: 'Forbidden'
        });
        else next();
      });
      else {
        socket.emit('error', {
        status: 400,
        success: false,
        message: 'No token provided'
      });
    }
    });

    driverNps.on('connection', socket => {
      let msg = `Starting bus route: ${route.name}`;
      console.log(msg);
      listenerNps.emit('notify', msg);

      socket.on('disconnect', socket => {
        listenerNps.emit('driver-disconnect', 'driver disconnect');
      });

      socket.on('update', newLoc => {
        if (newLoc.hasOwnProperty('lat') && newLoc.hasOwnProperty('lng')) {
          console.log('New location:');
          console.log(newLoc);
          listenerNps.emit('update', newLoc);
        } else socket.emit('error', {
          status: 405,
          success: false,
          message: 'Malformed location object'
        });
      });
    });

    console.log('created driver socket listener');
  });
});

io.sockets.on('connection', function(socket) {
    socket.on('error', function(err) {
    console.log(err);
  });
});

models.sequelize.sync().then(() => {
 /**
  * Listen on provided port, on all network interfaces.
  */
  server.listen(port, () => {
    debug('Express server listening on port ' + server.address().port);
  });
  server.on('error', onError);
  server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
